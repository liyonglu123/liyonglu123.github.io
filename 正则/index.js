//==================== 第一章 定义==========================
var reg = /xyz/; //字面量的形式
var a =new RegExp('xyz');
// 正则对象生成之后，有两种使用方式：
// 正则对象的方法：将字符串作为参数，比如regex.test(string)。
// 字符串对象的方法：将正则对象作为参数，比如string.match(regex)。
//==================== 第二章 正则对象的属性和方法==========================
// 1. 属性
// a. ==修饰符相关，返回一个布尔值，表示对应的修饰符是否设置。
// b. ==另一类是与修饰符无关的属性，主要是下面两个。 lastIndex  source

// text() 正则对象的test方法返回一个布尔值，表示当前模式是否能匹配参数字符串。
// exec() 正则对象的exec方法，可以返回匹配结果。如果发现匹配，就返回一个数组，成员是每一个匹配成功的子字符串，否则返回null。

// 字符串对象的方法
// match()：返回一个数组，成员是所有匹配的子字符串。
// search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。
// replace()：按照给定的正则表达式进行替换，返回替换后的字符串。 replace方法的一个应用，就是消除字符串首尾两端的空格。
// split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。

// 匹配规则
//字面量字符和元字符     
// ^ 表示字符串的开始位置
// $ 表示字符串的结束位置
// 竖线符号（|）在正则表达式中表示“或关系”（OR），即cat|dog表示匹配cat或dog。
// 转义符

// 正则表达式中那些有特殊含义的字符，如果要匹配它们本身，就需要在它们前面要加上反斜杠。比如要匹配加号，就要写成\+。
// 正则模式中，需要用斜杠转义的，一共有12个字符：^、.、[、$、(、)、|、*、+、?、{和\\。需要特别注意的是，
// 如果使用RegExp方法生成正则对象，转义需要使用两个斜杠，因为字符串内部会先转义一次。

/**
 * \cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。
 [\b] 匹配退格键(U+0008)，不要与\b混淆。
 \n 匹配换行键。
 \r 匹配回车键。
 \t 匹配制表符tab（U+0009）。
 \v 匹配垂直制表符（U+000B）。
 \f 匹配换页符（U+000C）。
 \0 匹配null字符（U+0000）。
 \xhh 匹配一个以两位十六进制数（\x00-\xFF）表示的字符。
 \uhhhh 匹配一个以四位十六进制数（\u0000-\uFFFF）表示的unicode字符。


 */
// 字符类
// 字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。
// 所有可供选择的字符都放在方括号内，比如[xyz] 表示x、y、z之中任选一个匹配。
// （1）脱字符（^）

// 如果方括号内的第一个字符是[^]，则表示除了字符类之中的字符，其他字符都可以匹配。比如，[^xyz]表示除了x、y、z之外都可以匹配。
// 如果方括号内没有其他字符，即只有[^]，就表示匹配一切字符，其中包括换行符，而点号（.）是不包括换行符的。
// （2）连字符（-）

// 某些情况下，对于连续序列的字符，连字符（-）用来提供简写形式，表示字符的连续范围。
// 比如，[abc]可以写成[a-c]，[0123456789]可以写成[0-9]，同理[A-Z]表示26个大写字母。
// 预定义模式
/**
 * 
\d 匹配0-9之间的任一数字，相当于[0-9]。
\D 匹配所有0-9以外的字符，相当于[^0-9]。
\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。
\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。
\s 匹配空格（包括制表符、空格符、断行符等），相等于[\t\r\n\v\f]。
\S 匹配非空格的字符，相当于[^\t\r\n\v\f]。
\b 匹配词的边界。
\B 匹配非词边界，即在词的内部。
 */
//  量词符
/**
 * 
* ? 问号表示某个模式出现0次或1次，等同于{0, 1}。
* *星号表示某个模式出现0次或多次，等同于{0,}。
+ 加号表示某个模式出现1次或多次，等同于{1,}。
 */

// 修饰符
//  i g m

// 组匹配  () 的整体的作用的问题

